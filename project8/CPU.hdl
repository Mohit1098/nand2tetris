 // This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A register
    DMux(in=true,sel=instruction[15],a=t0,b=t1);
    Mux16(b=outm,a=instruction,sel=instruction[15],out=Avalue);
    And(a=t1,b=instruction[5],out=t1d1);
    Or(a=t1d1,b=t0,out=Aenable);
    Register(in=Avalue,load=Aenable,out[0..14]=addressM,out=areg);


//PC 
    And(a=pcenable,b=t1,out=pcload);
    Not(in=pcload,out=inco);
    PC(in=areg,reset=reset,load=pcload,inc=inco,out[0..14]=pc);

//D register
    And(a=instruction[4],b=t1,out=denable);
    Register(in=outm,load=denable,out=dreg);

// when to write on memory
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    
    Mux16(a=areg,b=inM,sel=instruction[12],out=ytemp);
    ALU(x=dreg,y=ytemp,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outm,zr=p0,ng=p1);

    And(a=instruction[2],b=p1,out=j0);
    And(a=instruction[1],b=p0,out=j1);
    Or(a=j0,b=j1,out=j0j1);
    Or(a=p0,b=p1,out=p0p1);
    Not(in=p0p1,out=j);
    And(a=instruction[0],b=j,out=j2);

    Or(a=j0j1,b=j2,out=pcenable);
}